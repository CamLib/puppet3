# The configuration file for master.  Note that this file
# is likely to have unused configuration parameters in it; any parameter that's
# valid anywhere in Puppet can be in any config file, even if it's not used.
# 
# Every section can specify three special parameters: owner, group, and mode.
# These parameters affect the required permissions of any files specified after
# their specification.  Puppet will sometimes use these parameters to check its
# own configured state, so they can be used to make Puppet a bit more self-managing.
# 
# The file format supports octothorpe-commented lines, but not partial-line comments.
# 
# Generated on 2014-04-03 11:23:47 +0000.
# 
[master]
    # The main Puppet configuration directory.  The default for this setting is calculated based on the user.  If the process
    # is running as root or the user that Puppet is supposed to run as, it defaults to a system directory, but if it's running as any other user,
    # it defaults to being in the user's home directory.
    # The default value is '/usr/local/etc/puppet'.
    confdir = /usr/local/etc/puppet

    # Where Puppet stores dynamic and growing data.  The default for this setting is calculated specially, like `confdir`_.
    # The default value is '/var/lib/puppet'.
    vardir = /var/puppet

    # The name of the application, if we are running as one.  The
    # default is essentially $0 without the path or `.rb`.
    # The default value is 'master'.
    name = master

    # The directory in which to store log files
    # The default value is '/var/log/puppet'.
    logdir = /var/log/puppet

    # Whether to print stack traces on some errors
     trace = false

    # Whether to enable experimental performance profiling
    # profile = false

    # Whether log files should always flush to disk.
    # The default value is 'true'.
    # autoflush = true

    # What syslog facility to use when logging to
    # syslog.  Syslog has a fixed list of valid facilities, and you must
    # choose one of those; you cannot just make one up.
    # The default value is 'daemon'.
     syslogfacility = daemon

    # The directory where Puppet state is stored.  Generally,
    # this directory can be removed without causing harm (although it
    # might result in spurious service restarts).
    # The default value is '$vardir/state'.
    #statedir = /var/puppet/lib/state

    # Where Puppet PID files are kept.
    # The default value is '/var/run/puppet'.
    rundir = /var/run/puppet

    # Whether to just print a manifest to stdout and exit.  Only makes
    # sense when used interactively.  Takes into account arguments specified
    # on the CLI.
    # genmanifest = false

    # Print the value of a specific configuration setting.  If the name of a
    # setting is provided for this, then the value is printed and puppet
    # exits.  Comma-separate multiple values.  For a list of all values,
    # specify 'all'.
    # The default value is ''.
    # configprint = 

    # Whether to use colors when logging to the console.  Valid values are
    # `ansi` (equivalent to `true`), `html`, and `false`, which produces no color.
    # Defaults to false on Windows, as its console does not support ansi colors.
    # The default value is 'ansi'.
    # color = ansi

    # Whether to create the necessary user and group that puppet agent will run as.
    # mkusers = false

    # Whether Puppet should manage the owner, group, and mode of files it uses internally
    # The default value is 'true'.
    # manage_internal_file_permissions = true

    # Run the configuration once, rather than as a long-running
    # daemon. This is useful for interactively running puppetd.
    # onetime = false

    # The shell search path.  Defaults to whatever is inherited
    # from the parent process.
    # The default value is 'none'.
    # path = none

    # An extra search path for Puppet.  This is only useful
    # for those files that Puppet will load on demand, and is only
    # guaranteed to work for those cases.  In fact, the autoload
    # mechanism is responsible for making sure this directory
    # is in Ruby's search path
    
    # The default value is '$vardir/lib'.
    #libdir = /var/puppet/lib

    # If true, allows the parser to continue without requiring
    # all files referenced with `import` statements to exist. This setting was primarily
    # designed for use with commit hooks for parse-checking.
    # ignoreimport = false

    # The environment Puppet is running in.  For clients
    # (e.g., `puppet agent`) this determines the environment itself, which
    # is used to find modules and much more.  For servers (i.e., `puppet master`)
    # this provides the default environment for nodes we know nothing about.
    # The default value is 'production'.
    # environment = production

    # Which arguments to pass to the diff command when printing differences between
    # files. The command to use can be chosen with the `diff` setting.
    # The default value is '-u'.
    # diff_args = -u

    # Which diff command to use when printing differences between files. This setting
    # has no default value on Windows, as standard `diff` is not available, but Puppet can use many
    # third-party diff tools.
    # The default value is 'diff'.
    # diff = diff

    # Whether to log and report a contextual diff when files are being replaced.  This causes
    # partial file contents to pass through Puppet's normal logging and reporting system, so this setting
    # should be used with caution if you are sending Puppet's reports to an insecure destination.
    # This feature currently requires the `diff/lcs` Ruby library.
    # show_diff = false

    # Whether to send the process into the background.  This defaults to true on POSIX systems,
    # and to false on Windows (where Puppet currently cannot daemonize).
    # The default value is 'true'.
    # daemonize = true

    # The maximum allowed UID.  Some platforms use negative UIDs
    # but then ship with tools that do not know how to handle signed ints, so the UIDs show up as
    # huge numbers that can then not be fed back into the system.  This is a hackish way to fail in a
    # slightly more useful way when that happens.
    # The default value is '4294967290'.
    # maximum_uid = 4294967290

    # The YAML file containing indirector route configuration.
    # The default value is '$confdir/routes.yaml'.
    route_file = /usr/local/etc/puppet/routes.yaml

    # Where to find information about nodes.
    # The default value is 'plain'.
    node_terminus = plain

    # How to store cached nodes.
    # Valid values are (none), 'json', 'yaml' or write only yaml ('write_only_yaml').
    # The master application defaults to 'write_only_yaml', all others to none.
    # The default value is 'write_only_yaml'.
    node_cache_terminus = write_only_yaml

    # Where to retrive information about data.
    # The default value is 'hiera'.
    data_binding_terminus = hiera

    # The hiera configuration file. Puppet only reads this file on startup, so you must restart the puppet master every time you edit it.
    # The default value is '$confdir/hiera.yaml'.
    hiera_config = /usr/local/etc/puppet/hiera.yaml

    # Turns the binding system on or off. This includes hiera-2 and data in modules.  The binding system aggregates data from
    # modules and other locations and makes them available for lookup.  The binding system is experimental and any or all of it may change.
    # binder = false

    # The binder configuration file. Puppet reads this file on each request to configure the bindings system.
    # If set to nil (the default), a $confdir/binder_config.yaml is optionally loaded. If it does not exists, a default configuration
    # is used. If the setting :binding_config is specified, it must reference a valid and existing yaml file.
    # binder_config = 

    # Where to get node catalogs.  This is useful to change if, for instance,
    # you'd like to pre-compile catalogs and store them in memcached or some other easily-accessed store.
    # The default value is 'compiler'.
    catalog_terminus = compiler

    # How to store cached catalogs. Valid values are 'json' and 'yaml'. The agent application defaults to 'json'.
    # catalog_cache_terminus = 

    # The node facts terminus.
    # The default value is 'yaml'.
    facts_terminus = yaml

    # Should usually be the same as the facts terminus
    # The default value is '$facts_terminus'.
    inventory_terminus = yaml

    # The default source for files if no server is given in a
    # uri, e.g. puppet:///file. The default of `rest` causes the file to be
    # retrieved using the `server` setting. When running `apply` the default
    # is `file_server`, causing requests to be filled locally.
    # The default value is 'rest'.
    default_file_terminus = rest

    # Where the puppet agent web server logs.
    # The default value is '$logdir/http.log'.
    httplog = /var/log/puppet/http.log

    # The HTTP proxy host to use for outgoing connections.  Note: You
    # may need to use a FQDN for the server hostname when using a proxy.
    # The default value is 'none'.
    # http_proxy_host = none

    # The HTTP proxy port to use for outgoing connections
    # The default value is '3128'.
    # http_proxy_port = 3128

    # The minimum time to wait between checking for updates in
    # configuration files.  This timeout determines how quickly Puppet checks whether
    # a file (such as manifests or templates) has changed on disk. This setting can be a time interval in seconds (30 or 30s), minutes (30m), hours (6h), days (2d), or years (5y).
    # The default value is '15s'.
    filetimeout = 15

    # Which type of queue to use for asynchronous processing.
    # The default value is 'stomp'.
    # queue_type = stomp

    # Which type of queue to use for asynchronous processing.  If your stomp server requires
    # authentication, you can include it in the URI as long as your stomp client library is at least 1.1.1
    # The default value is 'stomp://localhost:61613/'.
    # queue_source = stomp://localhost:61613/

    # Whether to use a queueing system to provide asynchronous database integration.
    # Requires that `puppet queue` be running.
    # async_storeconfigs = false

    # Boolean; whether Puppet should store only facts and exported resources in the storeconfigs
    # database. This will improve the performance of exported resources with the older
    # `active_record` backend, but will disable external tools that search the storeconfigs database.
    # Thinning catalogs is generally unnecessary when using PuppetDB to store catalogs.
    # thin_storeconfigs = false

    # How to determine the configuration version.  By default, it will be the
    # time that the configuration is parsed, but you can provide a shell script to override how the
    # version is determined.  The output of this script will be added to every log message in the
    # reports, allowing you to correlate changes on your hosts to the source version on the server.
    # The default value is ''.
    # config_version = 

    # Boolean; whether to use the zlib library
    # The default value is 'true'.
    # zlib = true

    # A command to run before every agent run.  If this command returns a non-zero
    # return code, the entire Puppet run will fail.
    # The default value is ''.
    # prerun_command = 

    # A command to run after every agent run.  If this command returns a non-zero
    # return code, the entire Puppet run will be considered to have failed, even though it might have
    # performed work during the normal run.
    # The default value is ''.
    # postrun_command = 

    # Freezes the 'main' class, disallowing any code to be added to it.  This
    # essentially means that you can't have any code outside of a node, class, or definition other
    # than in the site manifest.
    # freeze_main = false

    # Flatten fact values to strings using #to_s. Means you can't have arrays or hashes as fact values.
    # The default value is 'true'.
    # stringify_facts = true

    # The name to use when handling certificates.  Defaults
    # to the fully qualified domain name.
    # The default value is 'cosy.ds.lib.cam.ac.uk'.
    # certname = cosy.ds.lib.cam.ac.uk

    # The `certdnsnames` setting is no longer functional,
    # after CVE-2011-3872. We ignore the value completely.
    # For your own certificate request you can set `dns_alt_names` in the
    # configuration and it will apply locally.  There is no configuration option to
    # set DNS alt names, or any other `subjectAltName` value, for another nodes
    # certificate.
    # Alternately you can use the `--dns_alt_names` command line option to set the
    # labels added while generating your own CSR.
    
    # The default value is ''.
    # certdnsnames = 

    # The comma-separated list of alternative DNS names to use for the local host.
    # When the node generates a CSR for itself, these are added to the request
    # as the desired `subjectAltName` in the certificate: additional DNS labels
    # that the certificate is also valid answering as.
    # This is generally required if you use a non-hostname `certname`, or if you
    # want to use `puppet kick` or `puppet resource -H` and the primary certname
    # does not match the DNS name you use to communicate with the host.
    # This is unnecessary for agents, unless you intend to use them as a server for
    # `puppet kick` or remote `puppet resource` management.
    # It is rarely necessary for servers; it is usually helpful only if you need to
    # have a pool of multiple load balanced masters, or for the same master to
    # respond on two physically separate networks under different names.
    
    # The default value is ''.
    # dns_alt_names = 

    # The certificate directory.
    # The default value is '$ssldir/certs'.
    certdir = /var/puppet/ssl/certs

    # Where SSL certificates are kept.
    # The default value is '/var/puppet/ssl'.
    # ssldir = /var/puppet/ssl

    # The public key directory.
    # The default value is '$ssldir/public_keys'.
    publickeydir = /var/puppet/ssl/public_keys

    # Where host certificate requests are stored.
    # The default value is '$ssldir/certificate_requests'.
    requestdir = /var/puppet/ssl/certificate_requests

    # The private key directory.
    # The default value is '$ssldir/private_keys'.
    privatekeydir = /var/puppet/ssl/private_keys

    # Where the client stores private certificate information.
    # The default value is '$ssldir/private'.
    privatedir = /var/puppet/ssl/private

    # Where puppet agent stores the password for its private key.
    # Generally unused.
    # The default value is '$privatedir/password'.
    passfile = /var/puppet/ssl/private/password

    # Where individual hosts store and look for their certificate requests.
    # The default value is '$ssldir/csr_$certname.pem'.
    hostcsr = /var/puppet/ssl/csr_cosy.ds.lib.cam.ac.uk.pem

    # Where individual hosts store and look for their certificates.
    # The default value is '$certdir/$certname.pem'.
    hostcert = /var/puppet/ssl/certs/cosy.ds.lib.cam.ac.uk.pem

    # Where individual hosts store and look for their private key.
    # The default value is '$privatekeydir/$certname.pem'.
    hostprivkey = /var/puppet/ssl/private_keys/cosy.ds.lib.cam.ac.uk.pem

    # Where individual hosts store and look for their public key.
    # The default value is '$publickeydir/$certname.pem'.
    hostpubkey = /var/puppet/ssl/public_keys/cosy.ds.lib.cam.ac.uk.pem

    # Where each client stores the CA certificate.
    # The default value is '$certdir/ca.pem'.
    localcacert = /var/puppet/ssl/certs/ca.pem

    # Certificate authorities who issue server certificates.  SSL servers will not be 
    # considered authentic unless they posses a certificate issued by an authority 
    # listed in this file.  If this setting has no value then the Puppet master's CA 
    # certificate (localcacert) will be used.
    # ssl_client_ca_auth = 

    # Certificate authorities who issue client certificates.  SSL clients will not be 
    # considered authentic unless they posses a certificate issued by an authority 
    # listed in this file.  If this setting has no value then the Puppet master's CA 
    # certificate (localcacert) will be used.
    # ssl_server_ca_auth = 

    # Where the host's certificate revocation list can be found.
    # This is distinct from the certificate authority's CRL.
    # The default value is '$ssldir/crl.pem'.
    hostcrl = /var/puppet/ssl/crl.pem

    # Whether certificate revocation should be supported by downloading a Certificate Revocation List (CRL)
    # to all clients.  If enabled, CA chaining will almost definitely not work.
    # The default value is 'true'.
    # certificate_revocation = true

    # The window of time leading up to a certificate's expiration that a notification
    # will be logged. This applies to CA, master, and agent certificates. This setting can be a time interval in seconds (30 or 30s), minutes (30m), hours (6h), days (2d), or years (5y).
    # The default value is '60d'.
    certificate_expire_warning = 5184000

    # Where Puppet should store plugins that it pulls down from the central
    # server.
    # The default value is '$libdir'.
    #plugindest = /var/lib/puppet/lib

    # From where to retrieve plugins.  The standard Puppet `file` type
    # is used for retrieval, so anything that is a valid file source can
    # be used here.
    # The default value is 'puppet://$server/plugins'.
    pluginsource = puppet://puppet/plugins

    # Whether plugins should be synced with the central server.
    # The default value is 'true'.
    # pluginsync = true

    # What files to ignore when pulling down plugins.
    # The default value is '.svn CVS .git'.
    # pluginsignore = .svn CVS .git

    # Where Puppet should look for facts.  Multiple directories should
    # be separated by the system path separator character. (The POSIX path separator is ':', and the Windows path separator is ';'.)
    # The default value is '$vardir/lib/facter:$vardir/facts'.
    #factpath = /var/lib/puppet/lib/facter:/var/lib/puppet/facts

    # An external command that can produce node information.  The command's output
    # must be a YAML dump of a hash, and that hash must have a `classes` key and/or
    # a `parameters` key, where `classes` is an array or hash and
    # `parameters` is a hash.  For unknown nodes, the command should
    # exit with a non-zero exit code.
    # This command makes it straightforward to store your node mapping
    # information in other data sources like databases.
    # The default value is 'none'.
    # external_nodes = none

    # The module repository
    # The default value is 'https://forge.puppetlabs.com'.
    # module_repository = https://forge.puppetlabs.com

    # The directory into which module tool data is stored
    # The default value is '$vardir/puppet-module'.
    #module_working_dir = /var/lib/puppet/puppet-module

    # The directory which the skeleton for module tool generate is stored.
    # The default value is '$module_working_dir/skeleton'.
    module_skeleton_dir = /var/lib/puppet/puppet-module/skeleton

    # The name to use the Certificate Authority certificate.
    # The default value is 'Puppet CA: $certname'.
    ca_name = Puppet CA: cosy.ds.lib.cam.ac.uk

    # The root directory for the certificate authority.
    # The default value is '$ssldir/ca'.
    cadir = /var/puppet/ssl/ca

    # The CA certificate.
    # The default value is '$cadir/ca_crt.pem'.
    cacert = /var/puppet/ssl/ca/ca_crt.pem

    # The CA private key.
    # The default value is '$cadir/ca_key.pem'.
    cakey = /var/puppet/ssl/ca/ca_key.pem

    # The CA public key.
    # The default value is '$cadir/ca_pub.pem'.
    capub = /var/puppet/ssl/ca/ca_pub.pem

    # The certificate revocation list (CRL) for the CA. Will be used if present but otherwise ignored.
    # The default value is '$cadir/ca_crl.pem'.
    cacrl = /var/puppet/ssl/ca/ca_crl.pem

    # Where the CA stores private certificate information.
    # The default value is '$cadir/private'.
    caprivatedir = /var/puppet/ssl/ca/private

    # Where the CA stores certificate requests
    # The default value is '$cadir/requests'.
    csrdir = /var/puppet/ssl/ca/requests

    # Where the CA stores signed certificates.
    # The default value is '$cadir/signed'.
    signeddir = /var/puppet/ssl/ca/signed

    # Where the CA stores the password for the private key
    # The default value is '$caprivatedir/ca.pass'.
    capass = /var/puppet/ssl/ca/private/ca.pass

    # Where the serial number for certificates is stored.
    # The default value is '$cadir/serial'.
    serial = /var/puppet/ssl/ca/serial

    # Whether to enable autosign.  Valid values are true (which
    # autosigns any key request, and is a very bad idea), false (which
    # never autosigns any key request), and the path to a file, which
    # uses that configuration file to determine which keys to sign.
    # The default value is '$confdir/autosign.conf'.
    autosign = /usr/local/etc/puppet/autosign.conf

    # Whether to allow a new certificate
    # request to overwrite an existing certificate.
    # allow_duplicate_certs = false

    # The default TTL for new certificates. If this setting is set, ca_days is ignored.
    # This setting can be a time interval in seconds (30 or 30s), minutes (30m), hours (6h), days (2d), or years (5y).
    # The default value is '5y'.
    ca_ttl = 157680000

    # The bit length of the certificates.
    # The default value is '4096'.
    # req_bits = 4096

    # The bit length of keys.
    # The default value is '4096'.
    # keylength = 4096

    # A Complete listing of all certificates
    # The default value is '$cadir/inventory.txt'.
    cert_inventory = /var/puppet/ssl/ca/inventory.txt

    # The name of the puppet config file.
    # The default value is 'puppet.conf'.
    # config_file_name = puppet.conf

    # The configuration file for the current puppet application
    # The default value is '$confdir/${config_file_name}'.
    config = /usr/local/etc/puppet/puppet.conf

    # The file containing the PID of a running process.  This file is intended to be used by service management frameworks and monitoring systems to determine if a puppet process is still in the process table.
    # The default value is '$rundir/${run_mode}.pid'.
    pidfile = /var/run/puppet/master.pid

    # The address a listening server should bind to.
    # The default value is '0.0.0.0'.
    # bindaddress = 0.0.0.0

    # The user puppet master should run as.
    # The default value is 'puppet'.
    # user = puppet

    # The group puppet master should run as.
    # The default value is 'puppet'.
    # group = puppet

    # Where puppet master looks for its manifests.
    # The default value is '$confdir/manifests'.
    manifestdir = /usr/local/etc/puppet/manifests

    # The entry-point manifest for puppet master.
    # The default value is '$manifestdir/site.pp'.
    manifest = /usr/local/etc/puppet/manifests/site.pp

    # Code to parse directly.  This is essentially only used
    # by `puppet`, and should only be set if you're writing your own Puppet
    # executable
    # The default value is ''.
    # code = 

    # Where puppet master logs.  This is generally not used,
    # since syslog is the default log destination.
    # The default value is '$logdir/puppetmaster.log'.
    masterlog = /var/log/puppet/puppetmaster.log

    # Where the puppet master web server logs.
    # The default value is '$logdir/masterhttp.log'.
    masterhttplog = /var/log/puppet/masterhttp.log

    # The port for puppet master traffic. For puppet master,
    # this is the port to listen on; for puppet agent, this is the port
    # to make requests on. Both applications use this setting to get the port.
    # The default value is '8140'.
    # masterport = 8140

    # How the puppet master determines the client's identity
    # and sets the 'hostname', 'fqdn' and 'domain' facts for use in the manifest,
    # in particular for determining which 'node' statement applies to the client.
    # Possible values are 'cert' (use the subject's CN in the client's
    # certificate) and 'facter' (use the hostname that the client
    # reported in its facts)
    # The default value is 'cert'.
    # node_name = cert

    # Where FileBucket files are stored.
    # The default value is '$vardir/bucket'.
    # bucketdir = /var/lib/puppet/bucket

    # The configuration file that defines the rights to the different
    # rest indirections.  This can be used as a fine-grained
    # authorization system for `puppet master`.
    # The default value is '$confdir/auth.conf'.
    rest_authconfig = /usr/local/etc/puppet/auth.conf

    # Whether the master should function as a certificate authority.
    # The default value is 'true'.
    # ca = true

    # The search path for modules, as a list of directories separated by the system path separator character. (The POSIX path separator is ':', and the Windows path separator is ';'.)
    # The default value is '$confdir/modules:/usr/share/puppet/modules'.
    modulepath = /usr/local/etc/puppet/modules:/usr/share/puppet/modules

    # The header containing an authenticated client's SSL DN.
    # This header must be set by the proxy to the authenticated client's SSL
    # DN (e.g., `/CN=puppet.puppetlabs.com`).  Puppet will parse out the Common
    # Name (CN) from the Distinguished Name (DN) and use the value of the CN
    # field for authorization.
    # Note that the name of the HTTP header gets munged by the web server
    # common gateway inteface: an `HTTP_` prefix is added, dashes are converted
    # to underscores, and all letters are uppercased.  Thus, to use the
    # `X-Client-DN` header, this setting should be `HTTP_X_CLIENT_DN`.
    # The default value is 'HTTP_X_CLIENT_DN'.
    # ssl_client_header = HTTP_X_CLIENT_DN

    # The header containing the status message of the client
    # verification. This header must be set by the proxy to 'SUCCESS' if the
    # client successfully authenticated, and anything else otherwise.
    # Note that the name of the HTTP header gets munged by the web server
    # common gateway inteface: an `HTTP_` prefix is added, dashes are converted
    # to underscores, and all letters are uppercased.  Thus, to use the
    # `X-Client-Verify` header, this setting should be
    # `HTTP_X_CLIENT_VERIFY`.
    # The default value is 'HTTP_X_CLIENT_VERIFY'.
    # ssl_client_verify_header = HTTP_X_CLIENT_VERIFY

    # The directory in which YAML data is stored, usually in a subdirectory.
    # The default value is '$vardir/yaml'.
    #yamldir = /var/lib/puppet/yaml

    # The directory in which serialized data is stored, usually in a subdirectory.
    # The default value is '$vardir/server_data'.
    #server_datadir = /var/lib/puppet/server_data

    # The list of reports to generate.  All reports are looked for
    # in `puppet/reports/name.rb`, and multiple report names should be
    # comma-separated (whitespace is okay).
    # The default value is 'store'.
    # reports = store

    # The directory in which to store reports
    # received from the client.  Each client gets a separate
    # subdirectory.
    # The default value is '$vardir/reports'.
    #reportdir = /var/lib/puppet/reports

    # The URL used by the http reports processor to send reports
    # The default value is 'http://localhost:3000/reports/upload'.
    # reporturl = http://localhost:3000/reports/upload

    # Where the fileserver configuration is stored.
    # The default value is '$confdir/fileserver.conf'.
    fileserverconfig = /usr/local/etc/puppet/fileserver.conf

    # Whether to only search for the complete
    # hostname as it is in the certificate when searching for node information
    # in the catalogs.
    # strict_hostname_checking = false

    # Whether to store each client's configuration, including catalogs, facts,
    # and related data.  This also enables the import and export of resources in
    # the Puppet language - a mechanism for exchange resources between nodes.
    # By default this uses ActiveRecord and an SQL database to store and query
    # the data; this, in turn, will depend on Rails being available.
    # You can adjust the backend using the storeconfigs_backend setting.
    # storeconfigs = false

    # Configure the backend terminus used for StoreConfigs.
    # By default, this uses the ActiveRecord store, which directly talks to the
    # database from within the Puppet Master process.
    # The default value is 'active_record'.
    storeconfigs_backend = active_record

    # The directory where RRD database files are stored.
    # Directories for each reporting host will be created under
    # this directory.
    # The default value is '$vardir/rrd'.
    #rrddir = /var/lib/puppet/rrd

    # How often RRD should expect data.
    # This should match how often the hosts report back to the server. This setting can be a time interval in seconds (30 or 30s), minutes (30m), hours (6h), days (2d), or years (5y).
    # The default value is '$runinterval'.
    rrdinterval = 1800

    # The root directory of devices' $vardir
    # The default value is '$vardir/devices'.
    #devicedir = /var/lib/puppet/devices

    # Path to the device config file for puppet device
    # The default value is '$confdir/device.conf'.
    deviceconfig = /usr/local/etc/puppet/device.conf

    # The explicit value used for the node name for all requests the agent
    # makes to the master. WARNING: This setting is mutually exclusive with
    # node_name_fact.  Changing this setting also requires changes to the default
    # auth.conf configuration on the Puppet Master.  Please see
    # http://links.puppetlabs.com/node_name_value for more information.
    # The default value is '$certname'.
    node_name_value = cosy.ds.lib.cam.ac.uk

    # The fact name used to determine the node name used for all requests the agent
    # makes to the master. WARNING: This setting is mutually exclusive with
    # node_name_value.  Changing this setting also requires changes to the default
    # auth.conf configuration on the Puppet Master.  Please see
    # http://links.puppetlabs.com/node_name_fact for more information.
    # The default value is ''.
    # node_name_fact = 

    # Where puppet agent caches the local configuration.  An
    # extension indicating the cache format is added automatically.
    # The default value is '$statedir/localconfig'.
    localconfig = /var/lib/puppet/state/localconfig

    # Where puppet agent and puppet master store state associated
    # with the running configuration.  In the case of puppet master,
    # this file reflects the state discovered through interacting
    # with clients.
    # The default value is '$statedir/state.yaml'.
    statefile = /var/lib/puppet/state/state.yaml

    # The directory in which client-side YAML data is stored.
    # The default value is '$vardir/client_yaml'.
    #clientyamldir = /var/lib/puppet/client_yaml

    # The directory in which serialized data is stored on the client.
    # The default value is '$vardir/client_data'.
    #client_datadir = /var/lib/puppet/client_data

    # The file in which puppet agent stores a list of the classes
    # associated with the retrieved configuration.  Can be loaded in
    # the separate `puppet` executable using the `--loadclasses`
    # option.
    # The default value is '$statedir/classes.txt'.
    classfile = /var/lib/puppet/state/classes.txt

    # The file in which puppet agent stores a list of the resources
    # associated with the retrieved configuration.
    # The default value is '$statedir/resources.txt'.
    resourcefile = /var/lib/puppet/state/resources.txt

    # The log file for puppet agent.  This is generally not used.
    # The default value is '$logdir/puppetd.log'.
    puppetdlog = /var/log/puppet/puppetd.log

    # The server to which the puppet agent should connect
    # The default value is 'puppet'.
    # server = puppet

    # Whether the server will search for SRV records in DNS for the current domain.
    # use_srv_records = false

    # The domain which will be queried to find the SRV records of servers to use.
    # The default value is 'ds.lib.cam.ac.uk'.
    # srv_domain = ds.lib.cam.ac.uk

    # Boolean; whether puppet agent should ignore schedules.  This is useful
    # for initial puppet agent runs.
    # ignoreschedules = false

    # Which port puppet agent listens on.
    # The default value is '8139'.
    # puppetport = 8139

    # Whether puppet agent should be run in noop mode.
    # noop = false

    # How often puppet agent applies the catalog.
    # Note that a runinterval of 0 means "run continuously" rather than
    # "never run." If you want puppet agent to never run, you should start
    # it with the `--no-client` option. This setting can be a time interval in seconds (30 or 30s), minutes (30m), hours (6h), days (2d), or years (5y).
    # The default value is '30m'.
    runinterval = 1800

    # Whether puppet agent should listen for
    # connections.  If this is true, then puppet agent will accept incoming
    # REST API requests, subject to the default ACLs and the ACLs set in
    # the `rest_authconfig` file. Puppet agent can respond usefully to
    # requests on the `run`, `facts`, `certificate`, and `resource` endpoints.
    # listen = false

    # The server to use for certificate
    # authority requests.  It's a separate server because it cannot
    # and does not need to horizontally scale.
    # The default value is '$server'.
    ca_server = puppet

    # The port to use for the certificate authority.
    # The default value is '$masterport'.
    ca_port = 8140

    # (Deprecated for 'preferred_serialization_format') What format to
    # use to dump the catalog.  Only supports 'marshal' and 'yaml'.  Only
    # matters on the client, since it asks the server for a specific format.
    # The default value is ''.
    # catalog_format = 

    # The preferred means of serializing
    # ruby instances for passing over the wire.  This won't guarantee that all
    # instances will be serialized using this method, since not all classes
    # can be guaranteed to support this format, but it will be used for all
    # classes that support it.
    # The default value is 'pson'.
    # preferred_serialization_format = pson

    # The serialization format to use when sending reports to the
    # `report_server`. Possible values are `pson` and `yaml`. This setting
    # affects puppet agent, but not puppet apply (which processes its own
    # reports).
    # This should almost always be set to `pson`. It can be temporarily set to
    # `yaml` to let agents using this Puppet version connect to a puppet master
    # running Puppet 3.0.0 through 3.2.x.
    # Note that this is set to 'yaml' automatically if the agent detects an
    # older master, so should never need to be set explicitly.
    # The default value is 'pson'.
    # report_serialization_format = pson

    # The serialization format to use when sending file_metadata
    # query parameters.  Older versions of puppet master expect certain query
    # parameters to be serialized as yaml, which is deprecated.
    # This should almost always be false. It can be temporarily set to true
    # to let agents using this Puppet version connect to a puppet master
    # running Puppet 3.0.0 through 3.2.x.
    # Note that this is set to true automatically if the agent detects an
    # older master, so should never need to be set explicitly.
    # legacy_query_parameter_serialization = false

    # A lock file to indicate that a puppet agent catalog run is currently in progress.  The file contains the pid of the process that holds the lock on the catalog run.
    # The default value is '$statedir/agent_catalog_run.lock'.
    agent_catalog_run_lockfile = /var/lib/puppet/state/agent_catalog_run.lock

    # A lock file to indicate that puppet agent runs have been administratively disabled.  File contains a JSON object with state information.
    # The default value is '$statedir/agent_disabled.lock'.
    agent_disabled_lockfile = /var/lib/puppet/state/agent_disabled.lock

    # Whether to use the cached configuration when the remote
    # configuration will not compile.  This option is useful for testing
    # new configurations, where you want to fix the broken configuration
    # rather than reverting to a known-good one.
    # The default value is 'true'.
    # usecacheonfailure = true

    # Whether to only use the cached catalog rather than compiling a new catalog
    # on every run.  Puppet can be run with this enabled by default and then selectively
    # disabled when a recompile is desired.
    # use_cached_catalog = false

    # Skip searching for classes and definitions that were missing during a
    # prior compilation. The list of missing objects is maintained per-environment and
    # persists until the environment is cleared or the master is restarted.
    # ignoremissingtypes = false

    # Ignore cache and always recompile the configuration.  This is
    # useful for testing new configurations, where the local cache may in
    # fact be stale even if the timestamps are up to date - if the facts
    # change or if the server changes.
    # ignorecache = false

    # (Deprecated) Facts that are dynamic; these facts will be ignored when deciding whether
    # changed facts should result in a recompile.  Multiple facts should be
    # comma-separated.
    # The default value is 'memorysize,memoryfree,swapsize,swapfree'.
    # dynamicfacts = memorysize,memoryfree,swapsize,swapfree

    # The maximum time to delay before runs.  Defaults to being the same as the
    # run interval. This setting can be a time interval in seconds (30 or 30s), minutes (30m), hours (6h), days (2d), or years (5y).
    # The default value is '$runinterval'.
    splaylimit = 1800

    # Whether to sleep for a pseudo-random (but consistent) amount of time before
    # a run.
    # splay = false

    # Where FileBucket files are stored locally.
    # The default value is '$vardir/clientbucket'.
    #clientbucketdir = /var/lib/puppet/clientbucket

    # How long the client should wait for the configuration to be retrieved
    # before considering it a failure.  This can help reduce flapping if too
    # many clients contact the server at one time. This setting can be a time interval in seconds (30 or 30s), minutes (30m), hours (6h), days (2d), or years (5y).
    # The default value is '2m'.
    configtimeout = 120

    # The server to send transaction reports to.
    # The default value is '$server'.
    report_server = puppet

    # The port to communicate with the report_server.
    # The default value is '$masterport'.
    report_port = 8140

    # The server to send facts to.
    # The default value is '$server'.
    inventory_server = puppet

    # The port to communicate with the inventory_server.
    # The default value is '$masterport'.
    inventory_port = 8140

    # Whether to send reports after every transaction.
    # The default value is 'true'.
    # report = true

    # Where puppet agent stores the last run report summary in yaml format.
    # The default value is '$statedir/last_run_summary.yaml'.
    lastrunfile = /var/lib/puppet/state/last_run_summary.yaml

    # Where puppet agent stores the last run report in yaml format.
    # The default value is '$statedir/last_run_report.yaml'.
    lastrunreport = /var/lib/puppet/state/last_run_report.yaml

    # Whether to create dot graph files for the different
    # configuration graphs.  These dot files can be interpreted by tools
    # like OmniGraffle or dot (which is part of ImageMagick).
    # graph = false

    # Where to store dot-outputted graphs.
    # The default value is '$statedir/graphs'.
    graphdir = /var/lib/puppet/state/graphs

    # Allow http compression in REST communication with the master.
    # This setting might improve performance for agent -> master communications over slow WANs.
    # Your puppet master needs to support compression (usually by activating some settings in a reverse-proxy
    # in front of the puppet master, which rules out webrick).
    # It is harmless to activate this settings if your master doesn't support
    # compression, but if it supports it, this setting might reduce performance on high-speed LANs.
    # http_compression = false

    # How frequently puppet agent should ask for a signed certificate.
    # When starting for the first time, puppet agent will submit a certificate
    # signing request (CSR) to the server named in the `ca_server` setting
    # (usually the puppet master); this may be autosigned, or may need to be
    # approved by a human, depending on the CA server's configuration.
    # Puppet agent cannot apply configurations until its approved certificate is
    # available. Since the certificate may or may not be available immediately,
    # puppet agent will repeatedly try to fetch it at this interval. You can
    # turn off waiting for certificates by specifying a time of 0, in which case
    # puppet agent will exit if it cannot get a cert.
    # This setting can be a time interval in seconds (30 or 30s), minutes (30m), hours (6h), days (2d), or years (5y).
    # The default value is '2m'.
    waitforcert = 120

    # How unrelated resources should be ordered when applying a catalog.
    # Allowed values are `title-hash`, `manifest`, and `random`. This
    # setting affects puppet agent and puppet apply, but not puppet master.
    # * `title-hash` (the default) will order resources randomly, but will use
    # the same order across runs and across nodes.
    # * `manifest` will use the order in which the resources were declared in
    # their manifest files.
    # * `random` will order resources randomly and change their order with each
    # run. This can work like a fuzzer for shaking out undeclared dependencies.
    # Regardless of this setting's value, Puppet will always obey explicit
    # dependencies set with the before/require/notify/subscribe metaparameters
    # and the `->`/`~>` chaining arrows; this setting only affects the relative
    # ordering of _unrelated_ resources.
    # The default value is 'title-hash'.
    # ordering = title-hash

    # During an inspect run, whether to archive files whose contents are audited to a file bucket.
    # archive_files = false

    # During an inspect run, the file bucket server to archive files to if archive_files is set.
    # The default value is '$server'.
    archive_file_server = puppet

    # The mapping between reporting tags and email addresses.
    # The default value is '$confdir/tagmail.conf'.
    tagmap = /usr/local/etc/puppet/tagmail.conf

    # Where to find the sendmail binary with which to send email.
    # The default value is '/usr/sbin/sendmail'.
    # sendmail = /usr/sbin/sendmail

    # The 'from' email address for the reports.
    # The default value is 'report@cosy.ds.lib.cam.ac.uk'.
    # reportfrom = report@cosy.ds.lib.cam.ac.uk

    # The server through which to send email reports.
    # The default value is 'none'.
    # smtpserver = none

    # The TCP port through which to send email reports.
    # The default value is '25'.
    # smtpport = 25

    # The name by which we identify ourselves in SMTP HELO for reports.
    # If you send to a smtpserver which does strict HELO checking (as with Postfix's
    # `smtpd_helo_restrictions` access controls), you may need to ensure this resolves.
    # The default value is 'cosy.ds.lib.cam.ac.uk'.
    # smtphelo = cosy.ds.lib.cam.ac.uk

    # The sqlite database file. This setting is only used by the ActiveRecord storeconfigs and inventory backends, which are deprecated.
    # The default value is '$statedir/clientconfigs.sqlite3'.
    dblocation = /var/lib/puppet/state/clientconfigs.sqlite3

    # The type of database to use. This setting is only used by the ActiveRecord storeconfigs and inventory backends, which are deprecated.
    # The default value is 'sqlite3'.
    # dbadapter = sqlite3

    # Whether to automatically migrate the database. This setting is only used by the ActiveRecord storeconfigs and inventory backends, which are deprecated.
    # dbmigrate = false

    # The name of the database to use. This setting is only used by the ActiveRecord storeconfigs and inventory backends, which are deprecated.
    # The default value is 'puppet'.
    # dbname = puppet

    # The database server for caching. Only
    # used when networked databases are used.
    # The default value is 'localhost'.
    # dbserver = localhost

    # The database password for caching. Only
    # used when networked databases are used. This setting is only used by the ActiveRecord storeconfigs and inventory backends, which are deprecated.
    # The default value is ''.
    # dbport = 

    # The database user for caching. Only
    # used when networked databases are used. This setting is only used by the ActiveRecord storeconfigs and inventory backends, which are deprecated.
    # The default value is 'puppet'.
    # dbuser = puppet

    # The database password for caching. Only
    # used when networked databases are used. This setting is only used by the ActiveRecord storeconfigs and inventory backends, which are deprecated.
    # The default value is 'puppet'.
    # dbpassword = puppet

    # The number of database connections for networked
    # databases.  Will be ignored unless the value is a positive integer. This setting is only used by the ActiveRecord storeconfigs and inventory backends, which are deprecated.
    # The default value is ''.
    # dbconnections = 

    # The database socket location. Only used when networked
    # databases are used.  Will be ignored if the value is an empty string. This setting is only used by the ActiveRecord storeconfigs and inventory backends, which are deprecated.
    # The default value is ''.
    # dbsocket = 

    # Where Rails-specific logs are sent. This setting is only used by the ActiveRecord storeconfigs and inventory backends, which are deprecated.
    # The default value is '$logdir/rails.log'.
    railslog = /var/log/puppet/rails.log

    # The log level for Rails connections.  The value must be
    # a valid log level within Rails.  Production environments normally use `info`
    # and other environments normally use `debug`. This setting is only used by the ActiveRecord storeconfigs and inventory backends, which are deprecated.
    # The default value is 'info'.
    # rails_loglevel = info

    # The url where the puppet couchdb database will be created.
    # Only used when `facts_terminus` is set to `couch`.
    # The default value is 'http://127.0.0.1:5984/puppet'.
    # couchdb_url = http://127.0.0.1:5984/puppet

    # Tags to use to find resources.  If this is set, then
    # only resources tagged with the specified tags will be applied.
    # Values must be comma-separated.
    # The default value is ''.
    # tags = 

    # Whether each resource should log when it is
    # being evaluated.  This allows you to interactively see exactly
    # what is being done.
    # evaltrace = false

    # Whether to print a transaction summary.
    # summarize = false

    # Whether SSL should be used when searching for nodes.
    # Defaults to false because SSL usually requires certificates
    # to be set up on the client side.
    # ldapssl = false

    # Whether TLS should be used when searching for nodes.
    # Defaults to false because TLS usually requires certificates
    # to be set up on the client side.
    # ldaptls = false

    # The LDAP server.  Only used if `node_terminus` is set to `ldap`.
    # The default value is 'ldap'.
    # ldapserver = ldap

    # The LDAP port.  Only used if `node_terminus` is set to `ldap`.
    # The default value is '389'.
    # ldapport = 389

    # The search string used to find an LDAP node.
    # The default value is '(&(objectclass=puppetClient)(cn=%s))'.
    # ldapstring = (&(objectclass=puppetClient)(cn=%s))

    # The LDAP attributes to use to define Puppet classes.  Values
    # should be comma-separated.
    # The default value is 'puppetclass'.
    # ldapclassattrs = puppetclass

    # The LDAP attributes that should be stacked to arrays by adding
    # the values in all hierarchy elements of the tree.  Values
    # should be comma-separated.
    # The default value is 'puppetvar'.
    # ldapstackedattrs = puppetvar

    # The LDAP attributes to include when querying LDAP for nodes.  All
    # returned attributes are set as variables in the top-level scope.
    # Multiple values should be comma-separated.  The value 'all' returns
    # all attributes.
    # The default value is 'all'.
    # ldapattrs = all

    # The attribute to use to define the parent node.
    # The default value is 'parentnode'.
    # ldapparentattr = parentnode

    # The user to use to connect to LDAP.  Must be specified as a
    # full DN.
    # The default value is ''.
    # ldapuser = 

    # The password to use to connect to LDAP.
    # The default value is ''.
    # ldappassword = 

    # The search base for LDAP searches.  It's impossible to provide
    # a meaningful default here, although the LDAP libraries might
    # have one already set.  Generally, it should be the 'ou=Hosts'
    # branch under your main directory.
    # The default value is ''.
    # ldapbase = 

    # Where Puppet looks for template files.  Can be a list of colon-separated
    # directories.
    # The default value is '$vardir/templates'.
    #templatedir = /var/lib/puppet/templates

    # Permit hyphens (`-`) in variable names and issue deprecation warnings about
    # them. This setting **should always be `false`;** setting it to `true`
    # will cause subtle and wide-ranging bugs. It will be removed in a future version.
    # Hyphenated variables caused major problems in the language, but were allowed
    # between Puppet 2.7.3 and 2.7.14. If you used them during this window, we
    # apologize for the inconvenience --- you can temporarily set this to `true`
    # in order to upgrade, and can rename your variables at your leisure. Please
    # revert it to `false` after you have renamed all affected variables.
    
    # allow_variables_with_dashes = false

    # Selects the parser to use for parsing puppet manifests (in puppet DSL language/'.pp' files).
    # Available choices are 'current' (the default), and 'future'.
    # The 'curent' parser means that the released version of the parser should be used.
    # The 'future' parser is a "time travel to the future" allowing early exposure to new language features.
    # What these fatures are will vary from release to release and they may be invididually configurable.
    # Available Since Puppet 3.2.
    
    # The default value is 'current'.
    # parser = current

    # Sets the max number of logged/displayed parser validation errors in case multiple errors have been detected.
    # A value of 0 is the same as value 1. The count is per manifest.
    
    # The default value is '10'.
    # max_errors = 10

    # Sets the max number of logged/displayed parser validation warnings in case multiple errors have been detected.
    # A value of 0 is the same as value 1. The count is per manifest.
    
    # The default value is '10'.
    # max_warnings = 10

    # Sets the max number of logged/displayed parser validation deprecation warnings in case multiple errors have been detected.
    # A value of 0 is the same as value 1. The count is per manifest.
    
    # The default value is '10'.
    # max_deprecations = 10

    # Whether to document all resources when using `puppet doc` to
    # generate manifest documentation.
    # document_all = false

